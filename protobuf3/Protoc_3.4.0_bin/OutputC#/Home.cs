// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Home {

  #region Messages
  public partial class req_login : pb::IMessage {
    private static readonly pb::MessageParser<req_login> _parser = new pb::MessageParser<req_login>(() => new req_login());
    public static pb::MessageParser<req_login> Parser { get { return _parser; } }

    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string channel_ = "";
    /// <summary>
    ///渠道
    /// </summary>
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string device_ = "";
    /// <summary>
    ///设备id	
    /// </summary>
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Channel);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Device);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Channel = input.ReadString();
            break;
          }
          case 34: {
            Device = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class rsp_login : pb::IMessage {
    private static readonly pb::MessageParser<rsp_login> _parser = new pb::MessageParser<rsp_login>(() => new rsp_login());
    public static pb::MessageParser<rsp_login> Parser { get { return _parser; } }

    private string address_ = "";
    /// <summary>
    ///网关地址
    /// </summary>
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint port_;
    /// <summary>
    ///网关端口
    /// </summary>
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    private ulong uid_;
    /// <summary>
    ///用户id
    /// </summary>
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private uint session_;
    /// <summary>
    ///session登录网关时校验
    /// </summary>
    public uint Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uid);
      }
      if (Session != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Session);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Session != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Session);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            Uid = input.ReadUInt64();
            break;
          }
          case 32: {
            Session = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public partial class req_check : pb::IMessage {
    private static readonly pb::MessageParser<req_check> _parser = new pb::MessageParser<req_check>(() => new req_check());
    public static pb::MessageParser<req_check> Parser { get { return _parser; } }

    private ulong uid_;
    /// <summary>
    ///用户id
    /// </summary>
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private uint session_;
    /// <summary>
    ///session用于校验
    /// </summary>
    public uint Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (Session != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Session);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Session != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Session);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 16: {
            Session = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public partial class rsp_check : pb::IMessage {
    private static readonly pb::MessageParser<rsp_check> _parser = new pb::MessageParser<rsp_check>(() => new rsp_check());
    public static pb::MessageParser<rsp_check> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class req_synchronize : pb::IMessage {
    private static readonly pb::MessageParser<req_synchronize> _parser = new pb::MessageParser<req_synchronize>(() => new req_synchronize());
    public static pb::MessageParser<req_synchronize> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class rsp_synchronize : pb::IMessage {
    private static readonly pb::MessageParser<rsp_synchronize> _parser = new pb::MessageParser<rsp_synchronize>(() => new rsp_synchronize());
    public static pb::MessageParser<rsp_synchronize> Parser { get { return _parser; } }

    private ulong time_;
    /// <summary>
    ///同步时间戳
    /// </summary>
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Time);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
