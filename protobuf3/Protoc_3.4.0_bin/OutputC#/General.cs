// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: general.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace General {

  #region Messages
  /// <summary>
  ///定义武将信息结构
  /// </summary>
  public partial class general_info : pb::IMessage {
    private static readonly pb::MessageParser<general_info> _parser = new pb::MessageParser<general_info>(() => new general_info());
    public static pb::MessageParser<general_info> Parser { get { return _parser; } }

    private uint index_;
    /// <summary>
    ///武将索引
    /// </summary>
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private uint gid_;
    /// <summary>
    ///武将id
    /// </summary>
    public uint Gid {
      get { return gid_; }
      set {
        gid_ = value;
      }
    }

    private uint armyId_;
    /// <summary>
    ///所属军团(1-5) 0表示不在军团
    /// </summary>
    public uint ArmyId {
      get { return armyId_; }
      set {
        armyId_ = value;
      }
    }

    private uint pos_;
    /// <summary>
    ///阵位编号（1-6） 0表示不在军团
    /// </summary>
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (Gid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Gid);
      }
      if (ArmyId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArmyId);
      }
      if (Pos != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Gid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gid);
      }
      if (ArmyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArmyId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            Gid = input.ReadUInt32();
            break;
          }
          case 24: {
            ArmyId = input.ReadUInt32();
            break;
          }
          case 32: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取所有武将信息
  /// </summary>
  public partial class req_getAll : pb::IMessage {
    private static readonly pb::MessageParser<req_getAll> _parser = new pb::MessageParser<req_getAll>(() => new req_getAll());
    public static pb::MessageParser<req_getAll> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class rsp_getAll : pb::IMessage {
    private static readonly pb::MessageParser<rsp_getAll> _parser = new pb::MessageParser<rsp_getAll>(() => new rsp_getAll());
    public static pb::MessageParser<rsp_getAll> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::General.general_info> _repeated_generals_codec
        = pb::FieldCodec.ForMessage(10, global::General.general_info.Parser);
    private pbc::RepeatedField<global::General.general_info> generals_ = new pbc::RepeatedField<global::General.general_info>();
    public pbc::RepeatedField<global::General.general_info> Generals {
      get { return generals_; }
      set { generals_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      generals_.WriteTo(output, _repeated_generals_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += generals_.CalculateSize(_repeated_generals_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      generals_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            generals_.AddEntriesFrom(input, _repeated_generals_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///武将布阵
  /// </summary>
  public partial class req_embattle : pb::IMessage {
    private static readonly pb::MessageParser<req_embattle> _parser = new pb::MessageParser<req_embattle>(() => new req_embattle());
    public static pb::MessageParser<req_embattle> Parser { get { return _parser; } }

    private uint index_;
    /// <summary>
    ///武将索引
    /// </summary>
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private uint armyId_;
    /// <summary>
    ///军团编号(1-5)  0表示下阵
    /// </summary>
    public uint ArmyId {
      get { return armyId_; }
      set {
        armyId_ = value;
      }
    }

    private uint pos_;
    /// <summary>
    ///阵位编号(1-6)	0表示下阵
    /// </summary>
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (ArmyId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ArmyId);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (ArmyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArmyId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            ArmyId = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public partial class rsp_embattle : pb::IMessage {
    private static readonly pb::MessageParser<rsp_embattle> _parser = new pb::MessageParser<rsp_embattle>(() => new rsp_embattle());
    public static pb::MessageParser<rsp_embattle> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::General.general_info> _repeated_changes_codec
        = pb::FieldCodec.ForMessage(10, global::General.general_info.Parser);
    private pbc::RepeatedField<global::General.general_info> changes_ = new pbc::RepeatedField<global::General.general_info>();
    /// <summary>
    ///发生变化的武将
    /// </summary>
    public pbc::RepeatedField<global::General.general_info> Changes {
      get { return changes_; }
      set { changes_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      changes_.WriteTo(output, _repeated_changes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += changes_.CalculateSize(_repeated_changes_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      changes_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changes_.AddEntriesFrom(input, _repeated_changes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
