// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Example.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace HiProtobuf {

  #region Messages
  public partial class Example : pb::IMessage {
    private static readonly pb::MessageParser<Example> _parser = new pb::MessageParser<Example>(() => new Example());
    public static pb::MessageParser<Example> Parser { get { return _parser; } }

    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private double name1_;
    public double Name1 {
      get { return name1_; }
      set {
        name1_ = value;
      }
    }

    private float name2_;
    public float Name2 {
      get { return name2_; }
      set {
        name2_ = value;
      }
    }

    private int name3_;
    public int Name3 {
      get { return name3_; }
      set {
        name3_ = value;
      }
    }

    private long name4_;
    public long Name4 {
      get { return name4_; }
      set {
        name4_ = value;
      }
    }

    private uint name5_;
    public uint Name5 {
      get { return name5_; }
      set {
        name5_ = value;
      }
    }

    private ulong name6_;
    public ulong Name6 {
      get { return name6_; }
      set {
        name6_ = value;
      }
    }

    private bool name7_;
    public bool Name7 {
      get { return name7_; }
      set {
        name7_ = value;
      }
    }

    private string name8_ = "";
    public string Name8 {
      get { return name8_; }
      set {
        name8_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<double> _repeated_name9_codec
        = pb::FieldCodec.ForDouble(82);
    private pbc::RepeatedField<double> name9_ = new pbc::RepeatedField<double>();
    public pbc::RepeatedField<double> Name9 {
      get { return name9_; }
      set { name9_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_name10_codec
        = pb::FieldCodec.ForFloat(90);
    private pbc::RepeatedField<float> name10_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Name10 {
      get { return name10_; }
      set { name10_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_name11_codec
        = pb::FieldCodec.ForInt32(98);
    private pbc::RepeatedField<int> name11_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Name11 {
      get { return name11_; }
      set { name11_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_name12_codec
        = pb::FieldCodec.ForInt64(106);
    private pbc::RepeatedField<long> name12_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Name12 {
      get { return name12_; }
      set { name12_ = value; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_name13_codec
        = pb::FieldCodec.ForUInt32(114);
    private pbc::RepeatedField<uint> name13_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> Name13 {
      get { return name13_; }
      set { name13_ = value; }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_name14_codec
        = pb::FieldCodec.ForUInt64(122);
    private pbc::RepeatedField<ulong> name14_ = new pbc::RepeatedField<ulong>();
    public pbc::RepeatedField<ulong> Name14 {
      get { return name14_; }
      set { name14_ = value; }
    }

    private static readonly pb::FieldCodec<bool> _repeated_name15_codec
        = pb::FieldCodec.ForBool(130);
    private pbc::RepeatedField<bool> name15_ = new pbc::RepeatedField<bool>();
    public pbc::RepeatedField<bool> Name15 {
      get { return name15_; }
      set { name15_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_name16_codec
        = pb::FieldCodec.ForString(138);
    private pbc::RepeatedField<string> name16_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Name16 {
      get { return name16_; }
      set { name16_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name1 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Name1);
      }
      if (Name2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Name2);
      }
      if (Name3 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Name3);
      }
      if (Name4 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Name4);
      }
      if (Name5 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Name5);
      }
      if (Name6 != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Name6);
      }
      if (Name7 != false) {
        output.WriteRawTag(64);
        output.WriteBool(Name7);
      }
      if (Name8.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name8);
      }
      name9_.WriteTo(output, _repeated_name9_codec);
      name10_.WriteTo(output, _repeated_name10_codec);
      name11_.WriteTo(output, _repeated_name11_codec);
      name12_.WriteTo(output, _repeated_name12_codec);
      name13_.WriteTo(output, _repeated_name13_codec);
      name14_.WriteTo(output, _repeated_name14_codec);
      name15_.WriteTo(output, _repeated_name15_codec);
      name16_.WriteTo(output, _repeated_name16_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name1 != 0D) {
        size += 1 + 8;
      }
      if (Name2 != 0F) {
        size += 1 + 4;
      }
      if (Name3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Name3);
      }
      if (Name4 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Name4);
      }
      if (Name5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Name5);
      }
      if (Name6 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Name6);
      }
      if (Name7 != false) {
        size += 1 + 1;
      }
      if (Name8.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name8);
      }
      size += name9_.CalculateSize(_repeated_name9_codec);
      size += name10_.CalculateSize(_repeated_name10_codec);
      size += name11_.CalculateSize(_repeated_name11_codec);
      size += name12_.CalculateSize(_repeated_name12_codec);
      size += name13_.CalculateSize(_repeated_name13_codec);
      size += name14_.CalculateSize(_repeated_name14_codec);
      size += name15_.CalculateSize(_repeated_name15_codec);
      size += name16_.CalculateSize(_repeated_name16_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name9_.Clear();
      name10_.Clear();
      name11_.Clear();
      name12_.Clear();
      name13_.Clear();
      name14_.Clear();
      name15_.Clear();
      name16_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 17: {
            Name1 = input.ReadDouble();
            break;
          }
          case 29: {
            Name2 = input.ReadFloat();
            break;
          }
          case 32: {
            Name3 = input.ReadInt32();
            break;
          }
          case 40: {
            Name4 = input.ReadInt64();
            break;
          }
          case 48: {
            Name5 = input.ReadUInt32();
            break;
          }
          case 56: {
            Name6 = input.ReadUInt64();
            break;
          }
          case 64: {
            Name7 = input.ReadBool();
            break;
          }
          case 74: {
            Name8 = input.ReadString();
            break;
          }
          case 82:
          case 81: {
            name9_.AddEntriesFrom(input, _repeated_name9_codec);
            break;
          }
          case 90:
          case 93: {
            name10_.AddEntriesFrom(input, _repeated_name10_codec);
            break;
          }
          case 98:
          case 96: {
            name11_.AddEntriesFrom(input, _repeated_name11_codec);
            break;
          }
          case 106:
          case 104: {
            name12_.AddEntriesFrom(input, _repeated_name12_codec);
            break;
          }
          case 114:
          case 112: {
            name13_.AddEntriesFrom(input, _repeated_name13_codec);
            break;
          }
          case 122:
          case 120: {
            name14_.AddEntriesFrom(input, _repeated_name14_codec);
            break;
          }
          case 130:
          case 128: {
            name15_.AddEntriesFrom(input, _repeated_name15_codec);
            break;
          }
          case 138: {
            name16_.AddEntriesFrom(input, _repeated_name16_codec);
            break;
          }
        }
      }
    }

  }

  public partial class Excel_Example : pb::IMessage {
    private static readonly pb::MessageParser<Excel_Example> _parser = new pb::MessageParser<Excel_Example>(() => new Excel_Example());
    public static pb::MessageParser<Excel_Example> Parser { get { return _parser; } }

    private static readonly pbc::MapField<int, global::HiProtobuf.Example>.Codec _map_data_codec
        = new pbc::MapField<int, global::HiProtobuf.Example>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::HiProtobuf.Example.Parser), 10);
    private readonly pbc::MapField<int, global::HiProtobuf.Example> data_ = new pbc::MapField<int, global::HiProtobuf.Example>();
    public pbc::MapField<int, global::HiProtobuf.Example> Data {
      get { return data_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _map_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_map_data_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      data_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
