// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Map {

  #region Messages
  /// <summary>
  ///进入房间请求
  /// </summary>
  public partial class req_enter : pb::IMessage {
    private static readonly pb::MessageParser<req_enter> _parser = new pb::MessageParser<req_enter>(() => new req_enter());
    public static pb::MessageParser<req_enter> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class rsp_enter : pb::IMessage {
    private static readonly pb::MessageParser<rsp_enter> _parser = new pb::MessageParser<rsp_enter>(() => new rsp_enter());
    public static pb::MessageParser<rsp_enter> Parser { get { return _parser; } }

    private uint roomId_;
    /// <summary>
    ///房间号
    /// </summary>
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private uint mapId_;
    /// <summary>
    ///地图文件编号
    /// </summary>
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MapId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            MapId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///定义据点信息
  /// </summary>
  public partial class point_info : pb::IMessage {
    private static readonly pb::MessageParser<point_info> _parser = new pb::MessageParser<point_info>(() => new point_info());
    public static pb::MessageParser<point_info> Parser { get { return _parser; } }

    private uint id_;
    /// <summary>
    ///服务端分配的编号
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private uint type_;
    /// <summary>
    ///类型
    /// </summary>
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private uint garrison_;
    /// <summary>
    ///驻守军队的编号，0表示没有
    /// </summary>
    public uint Garrison {
      get { return garrison_; }
      set {
        garrison_ = value;
      }
    }

    private string indentify_ = "";
    /// <summary>
    ///地图文件中的据点标识
    /// </summary>
    public string Indentify {
      get { return indentify_; }
      set {
        indentify_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    ///据点名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_armys_codec
        = pb::FieldCodec.ForUInt32(50);
    private pbc::RepeatedField<uint> armys_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///军队列表数据
    /// </summary>
    public pbc::RepeatedField<uint> Armys {
      get { return armys_; }
      set { armys_ = value; }
    }

    private uint owner_;
    /// <summary>
    ///领主id
    /// </summary>
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (Garrison != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Garrison);
      }
      if (Indentify.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Indentify);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      armys_.WriteTo(output, _repeated_armys_codec);
      if (Owner != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Owner);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Garrison != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Garrison);
      }
      if (Indentify.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Indentify);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += armys_.CalculateSize(_repeated_armys_codec);
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      armys_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            Garrison = input.ReadUInt32();
            break;
          }
          case 34: {
            Indentify = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            armys_.AddEntriesFrom(input, _repeated_armys_codec);
            break;
          }
          case 56: {
            Owner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取据点信息
  /// </summary>
  public partial class req_getPoint : pb::IMessage {
    private static readonly pb::MessageParser<req_getPoint> _parser = new pb::MessageParser<req_getPoint>(() => new req_getPoint());
    public static pb::MessageParser<req_getPoint> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class rsp_getPoint : pb::IMessage {
    private static readonly pb::MessageParser<rsp_getPoint> _parser = new pb::MessageParser<rsp_getPoint>(() => new rsp_getPoint());
    public static pb::MessageParser<rsp_getPoint> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Map.point_info> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Map.point_info.Parser);
    private pbc::RepeatedField<global::Map.point_info> points_ = new pbc::RepeatedField<global::Map.point_info>();
    /// <summary>
    ///所有据点信息
    /// </summary>
    public pbc::RepeatedField<global::Map.point_info> Points {
      get { return points_; }
      set { points_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      points_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器推送据点变化信息
  /// </summary>
  public partial class push_pointInfo : pb::IMessage {
    private static readonly pb::MessageParser<push_pointInfo> _parser = new pb::MessageParser<push_pointInfo>(() => new push_pointInfo());
    public static pb::MessageParser<push_pointInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Map.point_info> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Map.point_info.Parser);
    private pbc::RepeatedField<global::Map.point_info> points_ = new pbc::RepeatedField<global::Map.point_info>();
    /// <summary>
    ///变化的据点信息
    /// </summary>
    public pbc::RepeatedField<global::Map.point_info> Points {
      get { return points_; }
      set { points_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      points_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///定义领主信息
  /// </summary>
  public partial class lord_info : pb::IMessage {
    private static readonly pb::MessageParser<lord_info> _parser = new pb::MessageParser<lord_info>(() => new lord_info());
    public static pb::MessageParser<lord_info> Parser { get { return _parser; } }

    private uint id_;
    /// <summary>
    ///服务端分配的编号
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private ulong uid_;
    /// <summary>
    ///玩家的uid
    /// </summary>
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///玩家名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint alliance_;
    /// <summary>
    ///同盟id，0表示未结盟	
    /// </summary>
    public uint Alliance {
      get { return alliance_; }
      set {
        alliance_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Alliance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Alliance);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Alliance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Alliance);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Alliance = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取所有领主信息
  /// </summary>
  public partial class req_getLord : pb::IMessage {
    private static readonly pb::MessageParser<req_getLord> _parser = new pb::MessageParser<req_getLord>(() => new req_getLord());
    public static pb::MessageParser<req_getLord> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class rsp_getLord : pb::IMessage {
    private static readonly pb::MessageParser<rsp_getLord> _parser = new pb::MessageParser<rsp_getLord>(() => new rsp_getLord());
    public static pb::MessageParser<rsp_getLord> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Map.lord_info> _repeated_lords_codec
        = pb::FieldCodec.ForMessage(10, global::Map.lord_info.Parser);
    private pbc::RepeatedField<global::Map.lord_info> lords_ = new pbc::RepeatedField<global::Map.lord_info>();
    /// <summary>
    ///地图内所有领主信息
    /// </summary>
    public pbc::RepeatedField<global::Map.lord_info> Lords {
      get { return lords_; }
      set { lords_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lords_.WriteTo(output, _repeated_lords_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lords_.CalculateSize(_repeated_lords_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      lords_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lords_.AddEntriesFrom(input, _repeated_lords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送领主信息
  /// </summary>
  public partial class push_lordChange : pb::IMessage {
    private static readonly pb::MessageParser<push_lordChange> _parser = new pb::MessageParser<push_lordChange>(() => new push_lordChange());
    public static pb::MessageParser<push_lordChange> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Map.lord_info> _repeated_lords_codec
        = pb::FieldCodec.ForMessage(10, global::Map.lord_info.Parser);
    private pbc::RepeatedField<global::Map.lord_info> lords_ = new pbc::RepeatedField<global::Map.lord_info>();
    /// <summary>
    ///领主信息新加或者变化
    /// </summary>
    public pbc::RepeatedField<global::Map.lord_info> Lords {
      get { return lords_; }
      set { lords_ = value; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_remove_codec
        = pb::FieldCodec.ForUInt32(18);
    private pbc::RepeatedField<uint> remove_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///移除领主id
    /// </summary>
    public pbc::RepeatedField<uint> Remove {
      get { return remove_; }
      set { remove_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lords_.WriteTo(output, _repeated_lords_codec);
      remove_.WriteTo(output, _repeated_remove_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lords_.CalculateSize(_repeated_lords_codec);
      size += remove_.CalculateSize(_repeated_remove_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      lords_.Clear();
      remove_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lords_.AddEntriesFrom(input, _repeated_lords_codec);
            break;
          }
          case 18:
          case 16: {
            remove_.AddEntriesFrom(input, _repeated_remove_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///定义军队信息
  /// </summary>
  public partial class army_info : pb::IMessage {
    private static readonly pb::MessageParser<army_info> _parser = new pb::MessageParser<army_info>(() => new army_info());
    public static pb::MessageParser<army_info> Parser { get { return _parser; } }

    private uint armyId_;
    /// <summary>
    ///自己军团编号(1-5)
    /// </summary>
    public uint ArmyId {
      get { return armyId_; }
      set {
        armyId_ = value;
      }
    }

    private uint id_;
    /// <summary>
    ///服务端分配的编号
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private uint lastPoint_;
    /// <summary>
    ///最近所在点
    /// </summary>
    public uint LastPoint {
      get { return lastPoint_; }
      set {
        lastPoint_ = value;
      }
    }

    private uint nextPoint_;
    /// <summary>
    ///行军的下一个目标点位置，如果是0，表示没有在行军，就不会下面的字段
    /// </summary>
    public uint NextPoint {
      get { return nextPoint_; }
      set {
        nextPoint_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_moveList_codec
        = pb::FieldCodec.ForUInt32(42);
    private pbc::RepeatedField<uint> moveList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///除去next_point之外的行军列表
    /// </summary>
    public pbc::RepeatedField<uint> MoveList {
      get { return moveList_; }
      set { moveList_ = value; }
    }

    private ulong arriveTime_;
    /// <summary>
    ///到达next_point的时间戳
    /// </summary>
    public ulong ArriveTime {
      get { return arriveTime_; }
      set {
        arriveTime_ = value;
      }
    }

    private uint lordId_;
    /// <summary>
    ///所属的领主id
    /// </summary>
    public uint LordId {
      get { return lordId_; }
      set {
        lordId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ArmyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ArmyId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (LastPoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastPoint);
      }
      if (NextPoint != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NextPoint);
      }
      moveList_.WriteTo(output, _repeated_moveList_codec);
      if (ArriveTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ArriveTime);
      }
      if (LordId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LordId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ArmyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArmyId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (LastPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastPoint);
      }
      if (NextPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextPoint);
      }
      size += moveList_.CalculateSize(_repeated_moveList_codec);
      if (ArriveTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ArriveTime);
      }
      if (LordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LordId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      moveList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ArmyId = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            LastPoint = input.ReadUInt32();
            break;
          }
          case 32: {
            NextPoint = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            moveList_.AddEntriesFrom(input, _repeated_moveList_codec);
            break;
          }
          case 48: {
            ArriveTime = input.ReadUInt64();
            break;
          }
          case 56: {
            LordId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取己方军队信息
  /// </summary>
  public partial class req_getArmy : pb::IMessage {
    private static readonly pb::MessageParser<req_getArmy> _parser = new pb::MessageParser<req_getArmy>(() => new req_getArmy());
    public static pb::MessageParser<req_getArmy> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class rsp_getArmy : pb::IMessage {
    private static readonly pb::MessageParser<rsp_getArmy> _parser = new pb::MessageParser<rsp_getArmy>(() => new rsp_getArmy());
    public static pb::MessageParser<rsp_getArmy> Parser { get { return _parser; } }

    private uint lordId_;
    /// <summary>
    ///自己的领主id
    /// </summary>
    public uint LordId {
      get { return lordId_; }
      set {
        lordId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::Map.army_info> _repeated_armys_codec
        = pb::FieldCodec.ForMessage(18, global::Map.army_info.Parser);
    private pbc::RepeatedField<global::Map.army_info> armys_ = new pbc::RepeatedField<global::Map.army_info>();
    /// <summary>
    ///自己的军队信息
    /// </summary>
    public pbc::RepeatedField<global::Map.army_info> Armys {
      get { return armys_; }
      set { armys_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LordId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LordId);
      }
      armys_.WriteTo(output, _repeated_armys_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (LordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LordId);
      }
      size += armys_.CalculateSize(_repeated_armys_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      armys_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LordId = input.ReadUInt32();
            break;
          }
          case 18: {
            armys_.AddEntriesFrom(input, _repeated_armys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器推送军队变化信息
  /// </summary>
  public partial class push_armyInfo : pb::IMessage {
    private static readonly pb::MessageParser<push_armyInfo> _parser = new pb::MessageParser<push_armyInfo>(() => new push_armyInfo());
    public static pb::MessageParser<push_armyInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Map.army_info> _repeated_armys_codec
        = pb::FieldCodec.ForMessage(10, global::Map.army_info.Parser);
    private pbc::RepeatedField<global::Map.army_info> armys_ = new pbc::RepeatedField<global::Map.army_info>();
    /// <summary>
    ///只发送发生变化的军队信息
    /// </summary>
    public pbc::RepeatedField<global::Map.army_info> Armys {
      get { return armys_; }
      set { armys_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      armys_.WriteTo(output, _repeated_armys_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += armys_.CalculateSize(_repeated_armys_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      armys_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            armys_.AddEntriesFrom(input, _repeated_armys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取地图内所有信息
  /// </summary>
  public partial class req_getAll : pb::IMessage {
    private static readonly pb::MessageParser<req_getAll> _parser = new pb::MessageParser<req_getAll>(() => new req_getAll());
    public static pb::MessageParser<req_getAll> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class rsp_getAll : pb::IMessage {
    private static readonly pb::MessageParser<rsp_getAll> _parser = new pb::MessageParser<rsp_getAll>(() => new rsp_getAll());
    public static pb::MessageParser<rsp_getAll> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Map.lord_info> _repeated_lords_codec
        = pb::FieldCodec.ForMessage(10, global::Map.lord_info.Parser);
    private pbc::RepeatedField<global::Map.lord_info> lords_ = new pbc::RepeatedField<global::Map.lord_info>();
    /// <summary>
    ///地图内所有领主信息	
    /// </summary>
    public pbc::RepeatedField<global::Map.lord_info> Lords {
      get { return lords_; }
      set { lords_ = value; }
    }

    private uint lordId_;
    /// <summary>
    ///自己的领主id
    /// </summary>
    public uint LordId {
      get { return lordId_; }
      set {
        lordId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::Map.army_info> _repeated_armys_codec
        = pb::FieldCodec.ForMessage(26, global::Map.army_info.Parser);
    private pbc::RepeatedField<global::Map.army_info> armys_ = new pbc::RepeatedField<global::Map.army_info>();
    /// <summary>
    ///自己的军队信息
    /// </summary>
    public pbc::RepeatedField<global::Map.army_info> Armys {
      get { return armys_; }
      set { armys_ = value; }
    }

    private static readonly pb::FieldCodec<global::Map.point_info> _repeated_points_codec
        = pb::FieldCodec.ForMessage(34, global::Map.point_info.Parser);
    private pbc::RepeatedField<global::Map.point_info> points_ = new pbc::RepeatedField<global::Map.point_info>();
    /// <summary>
    ///所有据点信息
    /// </summary>
    public pbc::RepeatedField<global::Map.point_info> Points {
      get { return points_; }
      set { points_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lords_.WriteTo(output, _repeated_lords_codec);
      if (LordId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LordId);
      }
      armys_.WriteTo(output, _repeated_armys_codec);
      points_.WriteTo(output, _repeated_points_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lords_.CalculateSize(_repeated_lords_codec);
      if (LordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LordId);
      }
      size += armys_.CalculateSize(_repeated_armys_codec);
      size += points_.CalculateSize(_repeated_points_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      lords_.Clear();
      armys_.Clear();
      points_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lords_.AddEntriesFrom(input, _repeated_lords_codec);
            break;
          }
          case 16: {
            LordId = input.ReadUInt32();
            break;
          }
          case 26: {
            armys_.AddEntriesFrom(input, _repeated_armys_codec);
            break;
          }
          case 34: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家移动军队
  /// </summary>
  public partial class req_moveArmy : pb::IMessage {
    private static readonly pb::MessageParser<req_moveArmy> _parser = new pb::MessageParser<req_moveArmy>(() => new req_moveArmy());
    public static pb::MessageParser<req_moveArmy> Parser { get { return _parser; } }

    private uint armyId_;
    /// <summary>
    ///军团编号
    /// </summary>
    public uint ArmyId {
      get { return armyId_; }
      set {
        armyId_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_moveList_codec
        = pb::FieldCodec.ForUInt32(18);
    private pbc::RepeatedField<uint> moveList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///移动点的列表
    /// </summary>
    public pbc::RepeatedField<uint> MoveList {
      get { return moveList_; }
      set { moveList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ArmyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ArmyId);
      }
      moveList_.WriteTo(output, _repeated_moveList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ArmyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArmyId);
      }
      size += moveList_.CalculateSize(_repeated_moveList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      moveList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ArmyId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            moveList_.AddEntriesFrom(input, _repeated_moveList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///读取战斗数据文件
  /// </summary>
  public partial class req_getCombatInfo : pb::IMessage {
    private static readonly pb::MessageParser<req_getCombatInfo> _parser = new pb::MessageParser<req_getCombatInfo>(() => new req_getCombatInfo());
    public static pb::MessageParser<req_getCombatInfo> Parser { get { return _parser; } }

    private uint battleId_;
    /// <summary>
    ///战斗日志编号
    /// </summary>
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public partial class rsp_getCombatInfo : pb::IMessage {
    private static readonly pb::MessageParser<rsp_getCombatInfo> _parser = new pb::MessageParser<rsp_getCombatInfo>(() => new rsp_getCombatInfo());
    public static pb::MessageParser<rsp_getCombatInfo> Parser { get { return _parser; } }

    private global::Combat.combatInfo combatInfo_;
    /// <summary>
    ///战斗日志信息
    /// </summary>
    public global::Combat.combatInfo CombatInfo {
      get { return combatInfo_; }
      set {
        combatInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (combatInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CombatInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (combatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CombatInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (combatInfo_ == null) {
              combatInfo_ = new global::Combat.combatInfo();
            }
            input.ReadMessage(combatInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗测试
  /// </summary>
  public partial class req_testBattle : pb::IMessage {
    private static readonly pb::MessageParser<req_testBattle> _parser = new pb::MessageParser<req_testBattle>(() => new req_testBattle());
    public static pb::MessageParser<req_testBattle> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
