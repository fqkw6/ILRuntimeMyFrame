// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace HiProtobuf {

  #region Messages
  public partial class Test : pb::IMessage {
    private static readonly pb::MessageParser<Test> _parser = new pb::MessageParser<Test>(() => new Test());
    public static pb::MessageParser<Test> Parser { get { return _parser; } }

    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int hp_;
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int attack_;
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_infos_codec
        = pb::FieldCodec.ForString(42);
    private pbc::RepeatedField<string> infos_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Infos {
      get { return infos_; }
      set { infos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (Attack != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Attack);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      infos_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            Attack = input.ReadInt32();
            break;
          }
          case 42: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public partial class Excel_Test : pb::IMessage {
    private static readonly pb::MessageParser<Excel_Test> _parser = new pb::MessageParser<Excel_Test>(() => new Excel_Test());
    public static pb::MessageParser<Excel_Test> Parser { get { return _parser; } }

    private static readonly pbc::MapField<int, global::HiProtobuf.Test>.Codec _map_data_codec
        = new pbc::MapField<int, global::HiProtobuf.Test>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::HiProtobuf.Test.Parser), 10);
    private readonly pbc::MapField<int, global::HiProtobuf.Test> data_ = new pbc::MapField<int, global::HiProtobuf.Test>();
    public pbc::MapField<int, global::HiProtobuf.Test> Data {
      get { return data_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _map_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_map_data_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      data_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
